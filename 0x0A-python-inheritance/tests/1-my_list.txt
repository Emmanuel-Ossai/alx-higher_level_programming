"""
MyList Test Cases

Using `MyList`
-------------------

Importing the function from the module:
>>> MyList = __import__("1-my_list").MyList

Checking for module docstring:
>>> bool(__import__("1-my_list").__doc__)
True

Checking for class docstring:
>>> bool(__import__("1-my_list").MyList.__doc__)
True

Checking for method docstring:
>>> bool(__import__("1-my_list").MyList.print_sorted.__doc__)
True

Checking that MyList inherits from list:
>>> issubclass(MyList, list)
True

Checking for empty list:
>>> l = MyList()
>>> l.print_sorted()
[]

Checking that appending works:
>>> l = MyList()
>>> l.append(5)
>>> l.append(2)
>>> l.append(4)
>>> l.append(1)
>>> l
[5, 2, 4, 1]

Checking for list already in correct order:
>>> l.print_sorted()
[1, 2, 4, 5]

Checking for reversed order list:
>>> l = MyList()
>>> l.append(3)
>>> l.append(2)
>>> l.append(1)
>>> l.append(4)
>>> l
[3, 2, 1, 4]
>>> l.print_sorted()
[1, 2, 3, 4]

Checking for one negative number:
>>> l = MyList()
>>> l.append(-3)
>>> l.append(1)
>>> l.append(0)
>>> l.append(-2)
>>> l
[-3, 1, 0, -2]
>>> l.print_sorted()
[-3, -2, 0, 1]

Checking for all negative numbers:
>>> l = MyList()
>>> l.append(-7)
>>> l.append(-5)
>>> l.append(-10)
>>> l.append(-2)
>>> l
[-7, -5, -10, -2]
>>> l.print_sorted()
[-10, -7, -5, -2]

Checking for too many arguments:
>>> l.print_sorted(1)
Traceback (most recent call last):
...
TypeError: print_sorted() too many arguments
"""
